import { ServiceService } from "./service.service";
import { CreateServiceCategoryDto } from "./dto/create-service-category.dto";
import { CreateServiceDto } from "./dto/create-service.dto";
import { CreateServiceBundleDto } from "./dto/create-service-bundle.dto";
import { CreateServiceVariantDto } from "./dto/service-variant.dto";
import { UpdateServiceCategoryDto } from "./dto/update-service-category.dto";
import { UpdateServiceDto } from "./dto/update-service.dto";
import { UpdateServiceBundleDto } from "./dto/update-service-bundle.dto";
import { ServiceQueryDto } from "./dto/service-query.dto";
import { ServiceCategory } from "./schemas/service-category.schema";
import { Service } from "./schemas/service.schema";
import { ServiceBundle } from "./schemas/service-bundle.schema";
export declare class ServiceController {
    private readonly serviceService;
    constructor(serviceService: ServiceService);
    createCategory(createCategoryDto: CreateServiceCategoryDto): Promise<import("../common/interfaces/common.interface").ApiResponse<ServiceCategory>>;
    findAllCategories(): Promise<import("../common/interfaces/common.interface").ApiResponse<ServiceCategory[]>>;
    updateCategory(id: string, updateCategoryDto: UpdateServiceCategoryDto): Promise<import("../common/interfaces/common.interface").ApiResponse<ServiceCategory>>;
    create(createServiceDto: CreateServiceDto): Promise<import("../common/interfaces/common.interface").ApiResponse<Service>>;
    findAll(query: ServiceQueryDto): Promise<import("../common/interfaces/common.interface").ApiResponse<Service[]>>;
    getStats(): Promise<import("../common/interfaces/common.interface").ApiResponse<any>>;
    findOne(id: string): Promise<import("../common/interfaces/common.interface").ApiResponse<Service>>;
    update(id: string, updateServiceDto: UpdateServiceDto): Promise<import("../common/interfaces/common.interface").ApiResponse<Service>>;
    addVariant(id: string, variantDto: CreateServiceVariantDto): Promise<import("../common/interfaces/common.interface").ApiResponse<Service>>;
    remove(id: string): Promise<import("../common/interfaces/common.interface").ApiResponse<null>>;
    createBundle(createBundleDto: CreateServiceBundleDto): Promise<import("../common/interfaces/common.interface").ApiResponse<ServiceBundle>>;
    findAllBundles(): Promise<import("../common/interfaces/common.interface").ApiResponse<ServiceBundle[]>>;
    findOneBundle(id: string): Promise<import("../common/interfaces/common.interface").ApiResponse<ServiceBundle>>;
    updateBundle(id: string, updateBundleDto: UpdateServiceBundleDto): Promise<import("../common/interfaces/common.interface").ApiResponse<ServiceBundle>>;
}
