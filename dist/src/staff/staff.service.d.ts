import { Model } from 'mongoose';
import { StaffDocument, StaffSkills } from '../staff/schemas/staff.schema';
import { StaffSchedule, StaffScheduleDocument } from '../staff/schemas/staff-schedule.schema';
import { StaffAssignmentDocument } from '../staff/schemas/staff-assignment.schema';
import { WorkingHoursDocument } from '../staff/schemas/working-hours.schema';
import { CreateStaffDto } from './dto/create-staff.dto';
import { CreateStaffScheduleDto } from './dto/create-staff-schedule.dto';
import { AssignStaffDto } from './dto/assign-staff.dto';
import { CheckInStaffDto } from './dto/check-in-staff.dto';
import { CompleteAssignmentDto } from './dto/complete-assignment.dto';
export declare class StaffService {
    private staffModel;
    private staffScheduleModel;
    private staffAssignmentModel;
    private workingHoursModel;
    constructor(staffModel: Model<StaffDocument>, staffScheduleModel: Model<StaffScheduleDocument>, staffAssignmentModel: Model<StaffAssignmentDocument>, workingHoursModel: Model<WorkingHoursDocument>);
    createStaff(createStaffDto: CreateStaffDto): Promise<StaffDocument>;
    getStaffById(staffId: string): Promise<StaffDocument>;
    updateStaffStatus(staffId: string, status: string, reason?: string): Promise<StaffDocument>;
    updateStaffSkills(staffId: string, skills: StaffSkills[]): Promise<StaffDocument>;
    getStaffByBusiness(businessId: string, status?: string): Promise<StaffDocument[]>;
    getAvailableStaff(businessId: string, date: Date, startTime: string, endTime: string, serviceId?: string): Promise<StaffDocument[]>;
    createStaffSchedule(createScheduleDto: CreateStaffScheduleDto): Promise<StaffScheduleDocument>;
    getStaffSchedule(staffId: string, date: Date): Promise<StaffScheduleDocument | null>;
    updateStaffSchedule(scheduleId: string, updateData: Partial<StaffSchedule>): Promise<StaffScheduleDocument>;
    assignStaffToAppointment(assignmentDto: AssignStaffDto): Promise<StaffAssignmentDocument>;
    autoAssignStaff(businessId: string, appointmentId: string, clientId: string, serviceId: string, assignmentDate: Date, startTime: string, endTime: string): Promise<StaffAssignmentDocument>;
    getStaffAssignments(staffId: string, startDate: Date, endDate: Date): Promise<StaffAssignmentDocument[]>;
    completeStaffAssignment(assignmentId: string, completionData: CompleteAssignmentDto): Promise<StaffAssignmentDocument>;
    checkInStaff(checkInDto: CheckInStaffDto): Promise<void>;
    checkOutStaff(staffId: string, businessId: string, checkedOutBy: string): Promise<void>;
    getStaffWorkingHours(staffId: string, startDate: Date, endDate: Date): Promise<WorkingHoursDocument[]>;
    private recordWorkingHours;
    private checkStaffAvailability;
    private checkStaffSkill;
    private selectBestStaff;
    private getSkillLevelScore;
    private updateStaffStats;
    private timeOverlaps;
    private calculateMinutesDifference;
    private timeToMinutes;
    private calculateTotalMinutes;
    private generateStaffId;
    private createDefaultSchedule;
    private deactivateOverlappingSchedules;
}
